const { compile } = require("@riotjs/compiler");

/* EXPERIMENTAL:
 * Adopting riot-compiler v4
 * Issues:
 * 1. It provide only async `compile`. Can we use it in loader?
 * 2. No `entities` options and lacks `attribs` field.
  *   => Can riot-parser solve this?
 */
const { getOptions } = require("loader-utils");

/**
 * Generate the hmr code depending on the tags generated by the compiler
 * @param   { Array } tags - array of strings
 * @returns { string } the code needed to handle the riot hot reload
 */
function hotReload(tags) {
  // must sync with the definition in @riotjs/custom-components
  const COMPONENT_NAME_POSTFIX = "native-component";

  return `
  if (module.hot) {
    module.hot.accept()
    if (module.hot.data) {
      ${tags
        .map(tag => `riot.reload('${tag}-${COMPONENT_NAME_POSTFIX}')`)
        .join("\n")}
    }
  }`;
}

module.exports = function(source) {
  // tags collection
  const tags = [];

  // parse the user query
  const query = getOptions(this) || {};

  // normalise the query object in case of question marks
  const opts = Object.keys(query).reduce(function(acc, key) {
    acc[key.replace("?", "")] = query[key];
    return acc;
  }, {});

  // cache this module
  if (this.cacheable) this.cacheable();

  const callback = this.async();
  (async () => {
    try {
      // compile to generate entities
      let { code, map} = await compile(source, opts);

      code += opts.hot ? hotReload(tags) : '';

      callback(null, code, map);
    } catch (err) {
      callback(err);
    }
  })();
};
